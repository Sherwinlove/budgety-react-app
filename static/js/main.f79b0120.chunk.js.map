{"version":3,"sources":["utils.js","components/InputBar/InputBar.js","components/DisplayBudget/DisplayBudget.js","components/BudgetList/BudgetList.js","App.js","serviceWorker.js","index.js"],"names":["toNumbers","str","toString","replace","toCurrency","InputContainer","styled","div","InputBar","descriptionInput","setDescriptionInput","amountInput","setAmountInput","addBudgetItem","inputsAreNotFilled","randomPlaceholder","React","useMemo","budgetItemExamples","Math","floor","random","length","placeholder","value","onChange","e","target","nums","disabled","onClick","DisplayHeading","h1","p","hasStarted","DisplayBudget","budgetItems","total","reduce","a","c","cost","BudgetList","map","budgetItem","description","AppContainer","BudgetsContainer","App","useState","setBudgetItems","incomeList","filter","type","expenseList","newBudgetItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uPAAaA,EAAY,SAACC,GACxB,OAAOA,EAAIC,WAAWC,QAAQ,UAAW,KAG9BC,EAAa,SAACH,GACzB,OAAOA,EAAIC,WAAWC,QAAQ,kCAAmC,M,yTCDnE,IAAME,EAAiBC,IAAOC,IAAV,KA0ELC,EA1DE,SAAC,GAMX,IALLC,EAKI,EALJA,iBACAC,EAII,EAJJA,oBACAC,EAGI,EAHJA,YACAC,EAEI,EAFJA,eACAC,EACI,EADJA,cAMMC,GAAsBL,IAAqBE,EAE3CI,EAAoBC,IAAMC,SAAQ,WACtC,IAAMC,EAAqB,CACzB,uBACA,sBACA,UACA,oBACA,iCACA,kBACA,kBACA,yBAGF,OAAOA,EADGC,KAAKC,MAAMD,KAAKE,SAAWH,EAAmBI,WAEvD,IAEH,OACE,kBAACjB,EAAD,KACE,2BACEkB,YAAW,cAASR,GACpBS,MAAOf,EACPgB,SAAU,SAACC,GAAD,OAAOhB,EAAoBgB,EAAEC,OAAOH,UAEhD,2BACED,YAAY,SACZC,MAAOb,EACPc,SA/BkB,SAACC,GACvB,IAAME,EAAOxB,EAAWJ,EAAU0B,EAAEC,OAAOH,QAC3CZ,EAAegB,MA+Bb,6BACE,4BACEC,SAAUf,EACVgB,QAAS,kBAAMjB,EAAc,YAF/B,iBAMA,4BACEgB,SAAUf,EACVgB,QAAS,kBAAMjB,EAAc,aAF/B,qB,gJC/DR,IAAMkB,EAAiBzB,IAAO0B,GAAV,KAChB,SAACC,GAAD,OACAA,EAAEC,WAAa,mBAAqB,mCAkBzBC,EAZO,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACjBC,EAAQD,EAAYE,QAAO,SAACC,EAAGC,GAAJ,OAAUD,EAAIC,EAAEC,OAAM,GACjDP,EAAaE,EAAYd,OAC/B,OACE,kBAACS,EAAD,CAAgBG,WAAYA,GACzBA,EAAU,YACF9B,EAAWiC,IAChB,qDCDKK,EAfI,SAAC,GAAqB,IAAnBN,EAAkB,EAAlBA,YACpB,OACE,6BACGA,EAAYO,KAAI,SAACC,GAAD,OACf,6BACE,4BACGA,EAAWC,YADd,IAC4B,KACzBzC,EAAWwC,EAAWH,a,mlBCHnC,IAAMK,EAAexC,IAAOC,IAAV,KAgBZwC,EAAmBzC,IAAOC,IAAV,KA2DPyC,MA7Cf,WAAgB,IAAD,EACmCC,mBAAS,IAD5C,mBACNxC,EADM,KACYC,EADZ,OAEyBuC,mBAAS,IAFlC,mBAENtC,EAFM,KAEOC,EAFP,OAGyBqC,mBAAS,IAHlC,mBAGNb,EAHM,KAGOc,EAHP,KAqBPC,EAAaf,EAAYgB,QAC7B,SAACR,GAAD,MAAoC,WAApBA,EAAWS,QAEvBC,EAAclB,EAAYgB,QAC9B,SAACR,GAAD,MAAoC,YAApBA,EAAWS,QAE7B,OACE,kBAACP,EAAD,KACE,kBAAC,EAAD,CAAeV,YAAaA,IAC5B,kBAAC,EAAD,CACE3B,iBAAkBA,EAClBC,oBAAqBA,EACrBC,YAAaA,EACbC,eAAgBA,EAChBC,cAzBgB,SAACwC,GACrB,IACME,EAAgB,CACpBF,OACAZ,MAHmBzC,EAAUW,IAGG,WAAT0C,EAAoB,GAAK,GAChDR,YAAapC,GAEfyC,EAAe,GAAD,mBAAKd,GAAL,CAAkBmB,KAXhC7C,EAAoB,IACpBE,EAAe,OA8Bb,kBAACmC,EAAD,KACE,kBAAC,EAAD,CAAYX,YAAae,IACzB,kBAAC,EAAD,CAAYf,YAAakB,O,MChEbE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f79b0120.chunk.js","sourcesContent":["export const toNumbers = (str) => {\n  return str.toString().replace(/[^0-9]/g, \"\");\n};\n\nexport const toCurrency = (str) => {\n  return str.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { toNumbers, toCurrency } from \"../../utils\";\n\nconst InputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  flex-wrap: wrap;\n  input {\n    width: 100%;\n    text-align: center;\n    margin-bottom: 12px;\n  }\n  button {\n    margin: 12px 8px;\n  }\n`;\n\nconst InputBar = ({\n  descriptionInput,\n  setDescriptionInput,\n  amountInput,\n  setAmountInput,\n  addBudgetItem,\n}) => {\n  const _setAmountInput = (e) => {\n    const nums = toCurrency(toNumbers(e.target.value));\n    setAmountInput(nums);\n  };\n  const inputsAreNotFilled = !descriptionInput || !amountInput;\n\n  const randomPlaceholder = React.useMemo(() => {\n    const budgetItemExamples = [\n      \"Advertising Expenses\",\n      \"Business Vehicle(s)\",\n      \"Payroll\",\n      \"Employee Benefits\",\n      \"Meals & Entertainment Expenses\",\n      \"Office Expenses\",\n      \"Office Supplies\",\n      \"Professional Services\",\n    ];\n    const r = Math.floor(Math.random() * budgetItemExamples.length);\n    return budgetItemExamples[r];\n  }, []);\n\n  return (\n    <InputContainer>\n      <input\n        placeholder={`Ex. ${randomPlaceholder}`}\n        value={descriptionInput}\n        onChange={(e) => setDescriptionInput(e.target.value)}\n      ></input>\n      <input\n        placeholder=\"Amount\"\n        value={amountInput}\n        onChange={_setAmountInput}\n      ></input>\n      <div>\n        <button\n          disabled={inputsAreNotFilled}\n          onClick={() => addBudgetItem(\"income\")}\n        >\n          Add Income :)\n        </button>\n        <button\n          disabled={inputsAreNotFilled}\n          onClick={() => addBudgetItem(\"expense\")}\n        >\n          Add Expense ):\n        </button>\n      </div>\n    </InputContainer>\n  );\n};\n\nexport default InputBar;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { toCurrency } from \"../../utils\";\n\nconst DisplayHeading = styled.h1`\n  ${(p) =>\n    p.hasStarted ? \"font-size: 60px;\" : \"color: gray; font-size: 36px;\"}\n  text-align: center;\n  line-height: 1;\n  margin-bottom: 40px;\n`;\n\nconst DisplayBudget = ({ budgetItems }) => {\n  const total = budgetItems.reduce((a, c) => a + c.cost, 0);\n  const hasStarted = budgetItems.length;\n  return (\n    <DisplayHeading hasStarted={hasStarted}>\n      {hasStarted\n        ? ` $${toCurrency(total)}`\n        : \"Let's see how financially irresponsible you are.\"}\n    </DisplayHeading>\n  );\n};\n\nexport default DisplayBudget;\n","import React from \"react\";\nimport { toCurrency } from \"../../utils\";\n\nconst BudgetList = ({ budgetItems }) => {\n  return (\n    <div>\n      {budgetItems.map((budgetItem) => (\n        <div>\n          <li>\n            {budgetItem.description} {\" $\"}\n            {toCurrency(budgetItem.cost)}\n          </li>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default BudgetList;\n","import React, { useState } from \"react\";\nimport InputBar from \"./components/InputBar/InputBar\";\nimport DisplayBudget from \"./components/DisplayBudget/DisplayBudget\";\nimport BudgetList from \"./components/BudgetList/BudgetList\";\nimport styled from \"styled-components\";\nimport { toNumbers } from \"./utils\";\n\nconst AppContainer = styled.div`\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  list-style: none;\n  > div {\n    margin-bottom: 16px;\n  }\n  * {\n    box-sizing: border-box;\n  }\n`;\n\nconst BudgetsContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 12px;\n  > div {\n    &:first-child {\n      margin-right: 30px;\n    }\n    width: 28vw;\n    border-top: 1px solid gray;\n    padding-top: 12px;\n  }\n`;\n\nfunction App() {\n  const [descriptionInput, setDescriptionInput] = useState(\"\");\n  const [amountInput, setAmountInput] = useState(\"\");\n  const [budgetItems, setBudgetItems] = useState([]);\n\n  const resetInputs = () => {\n    setDescriptionInput(\"\");\n    setAmountInput(\"\");\n  };\n\n  const addBudgetItem = (type) => {\n    const numberAmount = toNumbers(amountInput);\n    const newBudgetItem = {\n      type, // 'income' || 'expense\n      cost: +numberAmount * (type === \"income\" ? 1 : -1),\n      description: descriptionInput,\n    };\n    setBudgetItems([...budgetItems, newBudgetItem]);\n    resetInputs();\n  };\n\n  const incomeList = budgetItems.filter(\n    (budgetItem) => budgetItem.type === \"income\"\n  );\n  const expenseList = budgetItems.filter(\n    (budgetItem) => budgetItem.type === \"expense\"\n  );\n  return (\n    <AppContainer>\n      <DisplayBudget budgetItems={budgetItems} />\n      <InputBar\n        descriptionInput={descriptionInput}\n        setDescriptionInput={setDescriptionInput}\n        amountInput={amountInput}\n        setAmountInput={setAmountInput}\n        addBudgetItem={addBudgetItem}\n      />\n      <BudgetsContainer>\n        <BudgetList budgetItems={incomeList} />\n        <BudgetList budgetItems={expenseList} />\n      </BudgetsContainer>\n    </AppContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}